import matplotlib.pyplot as pl
 import random
 def f(x):
        return 0.5*x + 10 # linea retta: f(x) = 0.5x + 10




 # Activation function
def activate(num):
  if num > 0:
    return 1
  else:
   return -1        

# genero pesi
weights = []
for x in range(0, 3):
  weights.append(random.random()*2-1)

n=100000
it=30
speed=0.01
for i in range(0,it+1):
            errTot = 0 # Il conteggio degli errori riparte da zero
            for x in range(0, n ):
                # Generiamo un punto a caso nel range di coordinate -250 +250 
                x_coord = random.random()*500-250
                y_coord = random.random()*500-250
                inputs=[x_coord, y_coord, 1]
                # Verifichiamo il reale posizionamento del punto rispetto alla retta
                line_y = f(x_coord)
                if y_coord > line_y: # Il punto è sopra la linea: valore atteso = 1
                    desired_output = 1
                else: # Il punto è sopra la linea: valore atteso = -1
                    desired_output = -1
                # Chiamiamo la funzione di back propagation e incrementiamo il conteggio errori
                sum = 0
                for x in range(0, len(weights)):
                  sum += weights[x] * inputs[x]
        
                guess = activate(sum)   # Calcolo il valore di output relativo agli input forniti
                error = desired_output - guess      # Calcolo l'errore come differenza tra valore in output e valore atteso
                # La correzione dei pesi avviene secondo la formula
                # peso = peso + errore*valore_input*learn_speed
                # se l'errore è pari a zero la formula non altera il valore del peso
                for x in range(0, len(weights)):
                  weights[x] += error*inputs[x]*speed
                #print("Addestramento in corso, m, q  :",-self.weights[0]/self.weights[1],-self.weights[2]/self.weights[1] )
                # Restituiamo 0 se la previsione è stata corretta, 1 altrimenti
                # questo dato servirà più avanti per conteggiare gli errori durante il processo di apprendimento
                if error != 0:
                   errTot+=1
                
            # Al termine del sottociclo di punti visualizziamo il valore del contatore errori
            print("Iterazione:",i,"Errori:",errTot)
print("Parametri, m, q  :",-weights[0]/weights[1],-weights[2]/weights[1])
